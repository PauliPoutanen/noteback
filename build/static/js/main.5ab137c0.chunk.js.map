{"version":3,"sources":["components/Note.js","components/Noteform.js","services/notes.js","services/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Noteform","onSubmit","newNote","handleNoteChange","value","onChange","type","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","className","App","useState","notes","setNotes","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","event","preventDefault","noteObject","Date","toISOString","Math","random","console","log","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ab137c0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n  ? 'make not important' : 'make important'\r\n  return (\r\n    <li>{note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from \"react\"\r\n\r\nconst Noteform = ({onSubmit, newNote, handleNoteChange }) => \r\n\r\n<form onSubmit={onSubmit}>\r\n        \r\n<div>\r\nWrite something here:  \r\n<input value={newNote}\r\nonChange={handleNoteChange} />\r\n</div>\r\n<button type=\"submit\">Send :) </button>\r\n</form>\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Noteform","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll2 = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from \"react\"\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Noteform from './components/Noteform'\nimport noteService from './services/notes'\nimport Notification from './services/Notification'\nimport './index.css'\n\n\nconst App = () => {\nconst [notes, setNotes] = useState([])\nconst [newNote, setNewNote] = useState('')\nconst [showAll, setShowAll] = useState(true)\nconst [errorMessage, setErrorMessage] = useState('')\n\nuseEffect(() => {\n  noteService\n    .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n}, [])\n\n\nconst addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() > 0.5\n  }\n\n  noteService\n    .create(noteObject)\n      .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n}\n\n\nconst handleNoteChange = (event) =>{\nconsole.log('note write..', event.target.value)\nsetNewNote(event.target.value)\n}\n\nconst toggleImportanceOf = id => {\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 2500)\n\n\n\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n}\n\nconst notesToShow = showAll\n? notes\n: notes.filter(note => note.important)\n\nreturn(\n<div>\n  <h2>Notes revisited</h2>\n  <Notification message={errorMessage} />\n  <div>\n  <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? 'important' : 'all' }\n        </button>\n  </div>\n  <ul>\n        {notesToShow.map(note => \n            <Note key={note.id} note={note} \n            toggleImportance={() =>toggleImportanceOf(note.id)}\n              \n              \n              />\n        )}\n      </ul>\n\n\n      <Noteform onSubmit={addNote} newNote={newNote} handleNoteChange={handleNoteChange}/>\n</div>\n)\n}\n\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}